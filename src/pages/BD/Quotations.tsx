import React, { useEffect, useMemo } from "react";

import { Container, Row, Col, CardBody, Card, CardTitle } from "reactstrap";

import { useDispatch, useSelector } from "react-redux";
import { createSelector } from "reselect";

import { EcoActionBD } from "./types";
import { ToastContainer } from "react-toastify";
import Spinners from "Components/Common/Spinner";

import {
  getAllQuotations,
  getDailyQuotationCount,
  getMonthlyQuotationsCount,
} from "slices/thunk";
import TableContainer from "common/TableContainer";
import { getDateAndTime } from "./CallBacksList";
import LinerGraph from "pages/Allcharts/apex/LinerGraph";
import { redBadge } from "./OrdersList";

const Quotations = () => {
  document.title = "Quotations | KDM Engineers Group";

  const selectProperties = createSelector(
    (state: EcoActionBD) => state.bd,
    (bd) => ({
      loading: bd.loading,
      quotations: bd.quotations,
      quotationsDaily: bd.quotationsDaily,
      quotationsMonthly: bd.quotationsMonthly,
    })
  );

  const { loading, quotations, quotationsDaily, quotationsMonthly } =
    useSelector(selectProperties);
  const dispatch = useDispatch<any>();

  useEffect(() => {
    dispatch(getAllQuotations());
  }, [dispatch]);

  useEffect(() => {
    dispatch(getDailyQuotationCount());
  }, [dispatch]);

  useEffect(() => {
    dispatch(getMonthlyQuotationsCount());
  }, [dispatch]);

  const columns = useMemo(
    () => [
      {
        header: "Generated By",
        accessorKey: "created_by",
        enableColumnFilter: false,
        enableSorting: false,
        cell: (cellProps: any) => {
          return <p>{cellProps.row.original.created_by}</p>;
        },
      },

      {
        header: "Contact",
        accessorKey: "contact",
        enableColumnFilter: false,
        enableSorting: false,
        cell: (cellProps: any) => {
          return <p>{cellProps.row.original.contact}</p>;
        },
      },

      {
        header: "Email",
        accessorKey: "eamil",
        enableColumnFilter: false,
        enableSorting: false,
        cell: (cellProps: any) => {
          return (
            <p>
              {cellProps.row.original.email
                ? cellProps.row.original.email
                : redBadge("Not Specified")}
            </p>
          );
        },
      },

      {
        header: "File",
        accessorKey: "proforma_name",
        enableColumnFilter: false,
        enableSorting: false,
        cell: (cellProps: any) => (
          <div style={{ cursor: "pointer" }}>
            <i className="bx bxs-file-pdf fs-1 align-middle text-danger me-2"></i>{" "}
            <a
              href={cellProps.row.original.location}
              target="_blank"
              className="text-success"
            >
              {cellProps.row.original.proforma_name}
            </a>
          </div>
        ),
      },

      {
        header: "Generated at",
        accessorKey: "created_at",
        enableColumnFilter: false,
        enableSorting: false,
        cell: (cellProps: any) => {
          return <p>{getDateAndTime(cellProps.row.original.created_at)}</p>;
        },
      },
    ],
    []
  );

  return (
    <React.Fragment>
      <div className="page-content">
        <Container fluid>
          <Row>
            <Col lg={6}>
              <Card>
                <CardBody>
                  <CardTitle tag="h6" className="mb-4">
                    Quotations Monthly Record
                  </CardTitle>
                  <LinerGraph
                    data={quotationsMonthly || []}
                    dataColors='["--bs-primary"]'
                    titles={["Quotations ", "Month"]}
                  />
                </CardBody>
              </Card>
            </Col>

            <Col lg={6}>
              <Card>
                <CardBody>
                  <CardTitle tag="h6" className="mb-4">
                    Quotations Daily Record
                  </CardTitle>
                  <LinerGraph
                    data={quotationsDaily || []}
                    dataColors='["--bs-success"]'
                    titles={["Quotations", "Day"]}
                  />
                </CardBody>
              </Card>
            </Col>
            <Col className="col-12">
              {loading && <Spinners />}

              <CardBody style={{ backgroundColor: "White" }}>
                <TableContainer
                  columns={columns}
                  data={quotations || []}
                  isPagination={true}
                  tableClass="align-middle table-nowrap table-hover dt-responsive nowrap w-100 dataTable no-footer dtr-inline"
                  theadClass="table-light"
                  paginationWrapper="dataTables_paginate paging_simple_numbers pagination-rounded"
                  pagination="pagination"
                />
              </CardBody>
            </Col>
          </Row>

          <ToastContainer />
        </Container>
      </div>
    </React.Fragment>
  );
};

export default Quotations;
